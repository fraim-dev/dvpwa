name: "CodeQL Security Analysis"

on:
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    # Run weekly on Mondays at 1 AM UTC
    - cron: '0 1 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      security-events: write
      issues: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Comment PR with CodeQL results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const sarifPath = path.join(process.cwd(), '..', 'results', 'python.sarif');
            
            if (fs.existsSync(sarifPath)) {
              const sarifData = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
              const results = sarifData.runs[0]?.results || [];
              
              let comment = '## üîç CodeQL Security Analysis Results\n\n';
              
              if (results.length === 0) {
                comment += '‚úÖ No security issues found by CodeQL!\n';
              } else {
                comment += `‚ö†Ô∏è Found ${results.length} potential security issues:\n\n`;
                
                // Group by severity
                const errorIssues = results.filter(r => r.level === 'error');
                const warningIssues = results.filter(r => r.level === 'warning');
                const noteIssues = results.filter(r => r.level === 'note');
                
                if (errorIssues.length > 0) {
                  comment += `üö® **High Severity (${errorIssues.length}):**\n`;
                  errorIssues.slice(0, 5).forEach(issue => {
                    const location = issue.locations[0]?.physicalLocation;
                    const file = location?.artifactLocation?.uri || 'Unknown file';
                    const line = location?.region?.startLine || 'Unknown line';
                    comment += `- **${issue.ruleId}**: ${issue.message.text}\n`;
                    comment += `  üìç ${file}:${line}\n`;
                  });
                  if (errorIssues.length > 5) {
                    comment += `- ... and ${errorIssues.length - 5} more high severity issues\n`;
                  }
                  comment += '\n';
                }
                
                if (warningIssues.length > 0) {
                  comment += `‚ö†Ô∏è **Medium Severity (${warningIssues.length}):**\n`;
                  warningIssues.slice(0, 3).forEach(issue => {
                    const location = issue.locations[0]?.physicalLocation;
                    const file = location?.artifactLocation?.uri || 'Unknown file';
                    const line = location?.region?.startLine || 'Unknown line';
                    comment += `- **${issue.ruleId}**: ${issue.message.text}\n`;
                    comment += `  üìç ${file}:${line}\n`;
                  });
                  if (warningIssues.length > 3) {
                    comment += `- ... and ${warningIssues.length - 3} more medium severity issues\n`;
                  }
                  comment += '\n';
                }
                
                if (noteIssues.length > 0) {
                  comment += `‚ÑπÔ∏è **Low Severity (${noteIssues.length}):**\n`;
                  comment += `- ${noteIssues.length} low severity issues found\n\n`;
                }
                
                comment += 'üìä **Full analysis available in the Security tab**\n';
                comment += 'üîó [View detailed results](https://github.com/${{ github.repository }}/security/code-scanning)\n';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              console.log('CodeQL SARIF file not found');
            }
          } catch (error) {
            console.log('Could not parse CodeQL results:', error);
          }
